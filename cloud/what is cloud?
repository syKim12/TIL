좋은 클라우드 아키텍처를 설계할 때 고려해야할 것
-> 운영 우수성, 보안, 안정성, 성능 효율성, 비용 최적화

DB의 부하를 줄이기 위해 구성을 어떻게 하는지가 중요하다. 
인스턴스에서 발생하는 세션정보나 애플리케이션의 임시정보를 모두 인스턴스에서 관리하지 않고 DynamoDB로 이동시키는 것 좋음
https://isn-t.tistory.com/24

개인적인 생각: 도메인을 잘 이해하는 것이 중요.

동기: 프로세스가 끝날 때까지 아무것도 하지 않고 기다림
비동기: 프로세스가 끝날 때까지 기다리지 않으므로 병렬로 다른 일을 할 수 있음.

IaaS(Infrastructure-as-a-Service):
AWS와 같은 서버의 CPU, 네트워크, 스토리지 등의 컴퓨터 자원을 인터넷으로 제공
PaaS (Platform-as-a-Service):
애플리케이션을 구동하는 플랫폼을 서비스로 제공
SaaS (Software-as-a-Service):
구글 문서, 네이버 클라우드처럼 소프트웨어를 서비스로 제공


클라우드 컴퓨팅의 핵심 기술
-> 대용량 스토리지 클라우드 제공 위한 분산 스토리지 기술
  - 여러 스토리지를 묶어서 활용
  - 서버와 스토리지 변화에 유연하게 대처 가능
  - 서버와 스토리지 사이의 중간 계층에서 작동
  - 장점: 장애 복구가 쉬움
  
-> 가상화의 최근 트렌드인 컨테이너 기술
  - 컨테이너: 모듈화되고 격리된 컴퓨팅 환경
  - 가상머신과 달리 컨테이너는 애플리케이션만 격리하므로 가상모신보다 빠르고 가볍다
  - 도커: 컨테이너 기반의 오픈소스 가상화 플랫폼
    - 이미지: 컨테이너 구동에 필요한 실행파일과 관련 라이브러리, 설정값 등을 포함하는 패키지
    - 컨테이너: 이미지를 실행한 상태
  -쿠버네티스: 컨테이너를 쉽고 빠르게 배포하고 자동으로 관리해주는 플랫폼
  
-> 클러스터 관리 기술
  - 대량의 데이터를 저장하거나 많은 연산을 처리하기 위해 여러 대의 컴퓨팅 자원을 하나로 묶은 시스템
  - 주요 역할: 노드 관리, 업데이트 및 설치의 자동화, 프로비저닝, 로드밸런싱
    - 노드: 클러스터를 구성하는 개별 시스템, 시스템 가용성 유지가 목표, 클라우드 컴퓨팅 환경에서는 가상화된 컴퓨팅 자원을 의미
    - 업데이트 및 설치의 자동화: 클러스터에 보안 패치를 적용하거나 프로그램을 설치 및 삭제할 수있음
    - 프로비저닝: 클러스터 내의 유휴 자원을 파악하고 필요한 순간에 자원을 빠르게 할당해서 제공하기 위한 기술
                  실시간으로 변하는 사용자의 요청에 따라 대처 가능
    - 로드밸런싱: 시스템 부하를 적절히 나눠서 컴퓨팅 자원을 효율적으로 사용하는 기술
                  사용자가 자동 확장의 옵션의 범위를 정하면 해당 범위 안에서 클라우드 컴퓨팅 업체는 트래픽에 따라 자동으로 컴퓨팅 자원을 확장 혹은 축소
                  
마이크로 서비스 아키텍쳐:
- 애플리케이션을 기능별로 잘게 나눠 서비스로 제작
- 서비스 사이에서 HTTP API 호출을 통해 필요한 기능을 불러 쓰는 방식
- 장점: 확장성, 단일 서비스 장애 발생하더라도 해당 서비스 외의 다른 기능에 큰 영향 x
- 단점: 하나의 애플리케이션을 너무 작은 서비스 단위로 잘게 쪼개면, 네트워크에 메시지를 보내는 트래픽이 많아지며 지연
        통합 테스트에서 문제가 발생하면 어떤 서비스에서 발생한 문제인지 찾아내는 과정 추가로 필요
        데이터베이스 분산으로 여러 데이터베이스에 흩어진 데이터 관리가 어려움.
        
클라우드 사례:
- 넷플릭스
- 금융 서비스: 전 세계 24시간 동안 발생하는 대용량 데이터를 실시간으로 분석하기 위해서는 클라우드가 적합
               보안을 중요시하는 보수적인 은행권에서도 핵심 기능에는 프라이빗 클라우드를 도입
               비 핵심 기능에는 퍼블릭 클라우드를 활용하는 하이브리드 클라우드 도입
  
