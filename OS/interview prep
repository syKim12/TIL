프로세스: 프로그램을 메모리 상에서 실행중인 작업
스레드: 프로세스 안에서 실행되는 여러 흐름 단위, 스레드는 stack만 할당 받고 나머지 영역은 공유한다.

기본적으로 프로세스마다 최소 1개의 스레드 소유
프로세스는 자신만의 고유공간과 자원을 할당받지만 스레드는 다른 스레드와 자원을 공유한다

멀티 프로세스 장점: 메모리 침범 문제를 os 차원에서 해결하기 때문에 안정성이 좋다
멀티 프로세스 단점: 각각 독립된 메모리 영역을 갖고 있기 때문에 작업량 많을수록 오버헤드가 발생하며, context switching으로 성능이 저하된다.

멀티스레드 장점: 다른 스레드와 자원을 공유하기 때문에 자료 공유 가능, 자원 손실 감소
멀티스레드 단점: 하나의 스레드가 데이터 공간을 망가뜨리면 모든 스레드에서 망가지기 때문에 안정성이 낮다.

프로세스가 생성되면 PCB에 Process의 메타데이터가 저장된다.
PCB 필요한 이유: 인터럽트 등의 이벤트가 발생하였을 때 다시 수행할 대기중인 프로세스에 관한 저장값을 PCB에 저장해둔다.

Context Switching: 수행 중인 프로세스를 변경하여 CPU의 레지스터 정보가 변경되는 것, 보통 인터럽트 등이 발생할 때 일어난다.

IPC 통신: 프로세스는 독립적으로 실행되기 때문에 프로세스간 통신을 가능케 해주는 것
프로세스는 커널이 제공하는 IPC 설비로 프로세스 간 통신을 할 수 있다.

IPC 종류:
- 공유 메모리: 프로세스간 메모리 영역을 공유해서 사용할 수 있도록
- IPC 중 가장 빠름
