Hadoop
하둡은 맵리듀스를 참고하여 제작되었다. 하둡에서 맵리듀스를 동작시키기 위해 자바 언어로 프로그래밍해야하므로 불편함이 있었다.
따라서 SQL과 같은 쿼리 언어를 하둡에서 실행하기 위해 Hive가 개발되어 프로그래밍 없이 데이터를 집계할 수 있게 되었다.

NoSQL
- 키밸류 스토어: 다수의 키와 값을 관련지어 저장
- 도큐멘트 스토어: JSON과 같은 복잡한 데이터 구조를 저장
- 와이드 칼럼 스토어: 여러 키를 사용하여 높은 확장성을 제공

RDB보다 빠른 속도로 읽고 쓸 수 있으며 분산처리에 뛰어나다. 하둡은 모여진 데이터를 나중에 집계하는 것이 목적이지만, 
NOSQL은 애플리케이션에서 온라인으로 접속하는 데이터베이스다.

분산 스토리지
분산 스토리지: 여러 컴퓨터와 디스크로부터 구성된 스토리지 시스템
객체 스토리지(e.g. Amazon S3) 혹은 NoSQL 데이터베이스를 분산 스토리지로 이용할 수 있다

분산 데이터 처리
쿼리 엔진: 분산 스토리지 상의 데이터를 SQL로 집계, (e.g. Hive)
대화형 쿼리 엔진: Hive 보다 속도가 빠름, (e.g. Amazon Athena)

워크플로 관리: 전체 데이터 파이프라인의 동작을 관리

데이터 레이크와 데이터 마트
데이터 레이크: 단순한 스토리지이며, 데이터 가공 불가
데이터 분석에 필요한 데이터를 가공, 집계하고 이것을 데이터 마트로 추출한 후에 데이터 웨어하우스처럼 데이터 분석을 진행할 수 있다.

기간계 시스템(mission-critical system)과 정보계 시스템(information system)
기간계 시스템: 비즈니스 근간에 관련된 중요한 시스템으로 이것이 정지되면 업무가 멈춘다.
정보계 시스템: 사내 커뮤니케이션과 의사 결정을 위해 이용하는 시스템으로 정지되어도 영향 범위가 제한되어 있다.
데이터를 효율적으로 분석하기 위해서는 정보계 시스템으로 분리해야 한다.
동일한 데이터를 여러 번 꺼낼 수 있다고 단정할 수는 없으므로, 한 번 복사한 데이터는 지우지 않도록 주의한다. 

데이터 프레임
데이터 프레임: 표 형식의 데이터를 추상화한 객체이다. (e.g. pandas)
pandas 데이터 프레임은 메모리 상에서 전개되기 때문에 수백만 행 정도의 스몰 데이터일 때 빠른 데이터 처리 가능하다.

전처리 이용 가능한 pandas 함수
- ix: 조건 일치 데이터만 검색
- drop: 지정 행 혹은 컬럼 삭제
- rename: 컬럼명 혹은 인덱스 값 변경
- dropna: 값이 없는 행 혹은 컬럼 제외
- fillna: 값이 없는 셀을 지정 값으로 치환
- apply: 각 칼럼 혹은 행에 함수 적용

pandas
판다스는 분산 시스템이 아니므로 너무 많은 양의 데이터를 읽어 들이면 메모리 부족 오류 발생 혹은 대기 시간이 길어진다.
애드 혹 데이터 분속의 효율을 높이기 위해 데이터 양을 감소시킨 후 스몰 데이터로 처리하는 것도 가능
장점: 여러 데이터 소스로 데이터를 읽어 들여 결합하거나 SQL과 스크립트 언어를 구분해 사용하는 처리 이용도 쉽게 
