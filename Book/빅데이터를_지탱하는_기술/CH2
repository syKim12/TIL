크로스 테이블: 엑셀 등의 스프레드 시트
트랜잭션 테이블: 행방향으로만 증가
크로스 집계: 트랜잭션 테이블에서 크로스 테이블로 변환

데이터 처리 지연
RDB는 원래 지연이 적고 많은 수의 클라이언트가 동시 접속해도 성능이 나빠지지 않으므로 많은 사용자가  사용하는 실제 운영 환경의 데이터 마트로 우수
BUT, RDB는 메모리가 부족하면 성능이 저하된다. 수억 레코드를 초과하는 데이터 집계에서는 항상 디바이스 I/O가 발생한다고 가정하고, 이를 해결하기 위해 압축과 분산을 활용할 수 있다.

MPP 기술로 '압축'과 '분산' 활용하기
MPP(대규모 병렬 처리): 분산된 데이터를 읽어 들이려면 멀티코어를 활용하면서 디스크 I/O를 병렬 처리하는 아키텍처
Amazon Redshift, Google Bigquery 등에서 이용 중

열 지향 데이터베이스 접근
cf) 행 지향 데이터베이스: 데이터베이스는 레코드 단위의 읽고 쓰기에 최적화 되어 있다는 개념 (e.g. Oracle, MySQL과 같은 일반적인 RDB)
열지향 데이터베이스: 칼럼 단위로 데이터 압축 (e.g. Teradata, Amazon Redshift)
cf) 데이터 웨어하우스나 데이터 레이크는 대량의 데이터를 처리하기 위해 처리량을 중시하는 설계. 반면 데이터 마트에서는 지연 시간 단축이 요구됨 -> 충분한 메모리 준비하거나 디스크 I/O 절감 필수

행 지향 데이터 베이스
특징: 매일 발생하는 대량의 트랜잭션을 지연없이 처리하기 위해 데이터 추가를 효율적으로 할 수 있는 것
인덱스가 없다면 모든 데이터를 로드해야하므로 디스크 I/O 발생으로 성능 저하.
행 지향 데이터베이스에서는 레코드 단위로 데이터가 저장되어 있으므로 필요 없는 열까지 디스크로부터 로드된다.
데이터 분석에서는 어떤 칼럼이 사용되는지 미리 알 수 없기 때문에 인덱스가 도움되지 않는 경우가 많다.

열 지향 데이터 베이스
- 데이터를 미리 칼럼 단위로 정리해 둠으로써 필요한 칼럼만을 로드하여 디스크 I/O를 줄인다.
- 데이터 구조상 집계하는 데는 고속이지만 저장하는 데는 시간이 걸린다.
- 데이터 압축 효율이 우수하다. 같은 칼럼에는 종종 유사한 데이터가 나열되며 같은 문자열의 반복은 매우 작게 압축할 수 있다. 데이터의 종류에 따라 다르지만 열 지향 
데이터 베이스는 압축되지 않은 행 지향 데이터베이스와 비교하면 1/10 이하로 압축할 수 있다.

MPP 데이터베이스의 접근 방식
- 열 지향 데이터베이스는 디스크에서 대량의 데이터를 읽기 때문에 쿼리 실행시간이 길어진다. 또한 압축된 데이터 전개 등으로 CPU 리소스를 필요로 하므로 멀티코어 활용을 통해 고속화하는 것이 좋다
- 반면 행 지향 데이터베이스에서는 보통 하나의 쿼리는 하나의 스레드에서 실행된다. 즉 개별 쿼리가 분산처리 되지 않는다.
- MPP는 하나의 쿼리를 다수의 작은 태스크로 분해하고 병렬로 실행한다.

MPP 데이터 베이스와 대화형 쿼리 엔진
- 쿼리가 잘 병렬화할 수 있다면 MPP를 사용한 데이터의 집계는 CPU 코어 수에 비례하여 고속화된다. 단 디스크로부터의 로드가 병목 현상이 발생하지 않도록 데이터가 분산되어 있어야한다.
- MPP 데이터베이스: 하드웨어 수준에서 데이터 집계에 최적화된 데이터 베이스 (because CPU와 디스크 모두를 균형 있게 늘려야하기 때문에 하드웨어와 소프트웨어가 통합된 제품으로 제공된다.)
- 대화형 쿼리 엔진: 
  - MPP 아키텍처는 하둡과 함께 사용되는 대화형 쿼리엔진으로도 채택되고 있다.
  - 데이터를 저장하는 것은 분산 스토리지의 역할
  - 데이터를 열 지향으로 압축하지 않는 한 MPP 데이터 베이스와 동등한 성능은 되지 못한다.
- 일부 상용 MPP 데이터베이스에서는 과부하 발생 방지를 위해 사용자마다 시스템 리소스를 제한할 수 있다.
  - 이유: 열 지향 스토리지와 MPP 개념을 결합함으로써 쿼리의 리소스 사용량이 많이 증가. 
  - 하나의 쿼리가 다수의 코어를 활용하는 것은 시스템의 모든 컴퓨터 리소스를 쉽게 소진해 버린다는 뜻.

집계 시스템 종류       |        스토리지 종류               |          최적 레코드 수
RDB                           행 지향                                 ~ 수천만 정도
MPP 데이터베이스              열 지향(하드웨어 일체형)                수억 ~
대화형 쿼리 엔진              열 지향(분산 스토리지에 보관)           수억 ~

