데이터 무결성
정확성, 일관성, 유효성이 유지되는 것을 말한다

개체무결성: pk는 고유한 값을 가지며 null 허용 안함
참조무결성: 참조관계에 있는 테이블의 데이터가 일관된 값을 갖도록 유지
도메인무결성: 올바른 데이터 입력 (ex. 주민등록번호에 알파벳 입력 x) 
무결성 규칙: 데이터의 무결성을 지키기 위한 모든 제약사항



데이터베이스 정규화
목적: 불필요한 데이터를 없애고 테이블을 잘 분리하기 위해 -> 데이터 수정과 삽입 용이
데이터의 무결성을 유지하는 것이 DBMS의 중요한 기능

3차 정규화: 기본키 이외의 다른 컬럼이 그외 다른 컬럼을 결정할 수 없도록 하는 것
BCNF: 3차 정규형을 조금 더 강화, "모든 결정자가 후보키 집합에 속한" 정규형


RDBMS
데이터 구조가 명확하며 명확한 스키마를 가질 때 사용하는 것이 좋음
관계를 맺고 있는 데이터가 자주 변경이 이루어지는 시스템일 때
장점: 이상 현상의 발생 가능성을 줄임
단점: 
시스템이 커지면 JOIN문이 많은 복잡한 쿼리가 만들어짐
연산 시간 증가, 성능향상을 위해서는 서버 성능 향상인 Scale-up만 가능 -> 빅데이터 등장으로 데이터와 트래픽 증가하며 성능 향상을 위해 NoSQL 등장

NoSQL:
정확한 데이터 구조를 알 수 없고, 데이터가 변경/확장이 될 수 있는 경우
장점:
수평적 확장(Scale-out)을 쉽게할 수 있으며, 스키마에 맞추어 데이터 관리 안해도 됨
자유로운 데이터 구조
단점: 데이터 중복 발생 가능
