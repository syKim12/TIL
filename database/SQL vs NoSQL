**SQL(관계형 DB)**

데이터는 정해진 스키마에 따라 테이블에 저장되며, 관계를 통해 여러 테이블에 분산된다.

- 스키마를 준수하지 않은 레코드는 테이블에 추가 불가
- 장점:
    - 하나의 테이블에서 **중복 없이** 하나의 데이터만을 관리하므로 다른 테이블에서 부정확한 데이터를 다룰 위험 x
    - 명확하게 정의된 스키마, 데이터 무결성 보장
- 단점:
    - 데이터 스키마로 인해 덜 유연하다. 이에 따라 나중에 수정이 힘들다
    - 관계를 맺고 있어 조인문이 많은 복잡한 쿼리가 만들어질 수 있다.
    - 대체로 수직적 확장만 가능하다.
- When?
    - 관계를 맺고 있는 데이터가 자주 변경될 때, NoSQL에서는 여러 컬렉션을 모두 수정해야하므로 비효율적이다
    - 변경될 여지가 없는 경우에는 명확한 스키마가 사용자와 데이터에게 중요할 때 SQL을 이용

**NOSQL(비관계형 DB)**

스키마와 관계가 존재하지 않으며, 레코드를 문서(Documents)라고 부른다. SQL은 정해진 스키마를 따르지 않으면 데이터 추가가 불가능하지만, NOSQL에서는 다른 구조의 데이터를 같은 컬렉션에 추가할 수 있다.

- NoSQL에는 조인이라는 개념이 존재하지 않는다.
- 문서는 Json과 유사한 형태로 가지고 있으며, 관계형 데이터베이스처럼 테이블로 나누지 않고, 관련 데이터를 동일한 ‘컬렉션’에 넣는다.
- 장점:
    - 스키마가 없어서 유연하다. 저장된 데이터를 조정하고 새로운 필드를 추가할 수 있다.
    - 데이터는 애플리케이션이 필요로 저장됨. 데이터 읽어오는 속도 빨라짐
    - 수직 및 수평 확장이 가능하므로 애플리케이션이 발생시키는 모든 읽기/쓰기 요청 처리 가능
- 단점:
    - 유연성으로 데이터 구조 결정 미룰수도
    - 데이터 중복을 계속 업데이트 해야한다
    - 데이터가 여러 컬렉션에 중복되어 있기 때문에 수정 시 모든 컬렉션에서 수행해야한다.
- When?
    - 조인을 잘 사용하지 않고 자주 변경되지 않는 데이터일 때 효율적
        - 조인을 하고 싶을때는 컬렉션을 통해 데이터를 복제하여 각 컬렉션 일부분에 속하는 데이터를 정확하게 산출하도록함.
    - 정확한 데이터 구조를 알 수 없거나 변경/확장될 수 있는 경우
    - 읽기를 자주 하지만, 데이터 변경은 자주 없는 경우
    - 데이터베이스를 수평으로 확장해야 하는 경우 (막대한 양의 데이터를 다뤄야 하는 경우)
